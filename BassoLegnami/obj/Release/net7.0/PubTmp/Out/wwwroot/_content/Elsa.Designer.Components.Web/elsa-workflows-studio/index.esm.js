import{S as o}from"./p-c74b54ba.js";export{A as ActivityTraits,O as OrderBy,S as SyntaxNames,W as WorkflowContextFidelity,a as WorkflowPersistenceBehavior,b as WorkflowStatus,c as WorkflowTestActivityMessageStatus,g as getVersionOptionsString}from"./p-c74b54ba.js";import{E as i}from"./p-d88cb309.js";export{E as EventTypes}from"./p-d88cb309.js";export{A as ActivityIconProvider,a as activityIconProvider}from"./p-7462b7bd.js";export{C as ConfirmDialogService,c as confirmDialogService}from"./p-2ee88bf6.js";export{T as ToastNotificationService,t as toastNotificationService}from"./p-8675edd4.js";export{a as createElsaClient,c as createHttpClient}from"./p-ccd51ea4.js";import{e as r}from"./p-93cac3a6.js";export{e as eventBus}from"./p-93cac3a6.js";export{F as FeaturesDataManager,f as featuresDataManager}from"./p-34c33cf9.js";export{P as PluginManager,p as pluginManager}from"./p-743d1a9d.js";export{P as PropertyDisplayManager,p as propertyDisplayManager}from"./p-aae56f4d.js";export{M as MonacoEditorDialogService,m as monacoEditorDialogService}from"./p-1b40b0d1.js";import{H as n}from"./p-f1ec68ec.js";import"./p-a3b5bd35.js";import{h as l}from"./p-971980b1.js";import"./p-82db2ff5.js";import"./p-949334ec.js";import{a as h}from"./p-e0c1fede.js";import{P as w}from"./p-88678d9c.js";export{s as DashboardState}from"./p-e77aabd2.js";export{d as DashboardTunnel}from"./p-821a7518.js";import"./p-ee0b9025.js";import"./p-80de33dc.js";import"./p-83f217d4.js";const u={ConnectionCreated:"connection-created"};class j{constructor(){r.on(i.ActivityDesignDisplaying,this.onActivityDisplaying),r.on(i.Dashboard.Appearing,this.onLoadingMenu)}onActivityDisplaying(t){const i=t.activityModel;if(!i.type.endsWith("Webhook"))return;const e=(i.properties||[]).find((t=>"Path"==t.name))||{name:"Path",expressions:{Literal:"",syntax:o.Literal}},a=l(e.expressions[e.syntax||o.Literal]);t.bodyDisplay=`<p>${a}</p>`}onLoadingMenu(t){t.data.menuItems=[...t.data.menuItems,["webhook-definitions","Webhook Definitions"]],t.data.routes=[...t.data.routes,["webhook-definitions","elsa-studio-webhook-definitions-list",!0],["webhook-definitions/:id","elsa-studio-webhook-definitions-edit",!1]]}}let y=null,v=null;class x{constructor(t){this.serverUrl=t.serverUrl,r.on(i.WorkflowRegistryLoadingColumns,this.onLoadingColumns),r.on(i.WorkflowRegistryUpdating,this.onUpdating)}onLoadingColumns(t){t.data={headers:[["Enabled"]],hasContextItems:!0}}async onUpdating(t){const e=await async function(t){if(v)return v;const e=await function(t){if(y)return y;const e={baseURL:t};r.emit(i.HttpClientConfigCreated,this,{config:e});const a=h.create(e),s=new n(a);return r.emit(i.HttpClientCreated,this,{service:s,httpClient:a}),y=a}(t);return v={workflowSettingsApi:{list:async()=>(await e.get("v1/workflow-settings")).data,save:async t=>(await e.post("v1/workflow-settings",t)).data,delete:async t=>{await e.delete(`v1/workflow-settings/${t}`)}}},v}(this.serverUrl),a=(await e.workflowSettingsApi.list()).find((i=>i.workflowBlueprintId==t.params[0]&&i.key==t.params[1]));null!=a&&await e.workflowSettingsApi.delete(a.id);const s={workflowBlueprintId:t.params[0],key:t.params[1],value:t.params[2]};await e.workflowSettingsApi.save(s),await r.emit(i.WorkflowRegistryUpdated,this)}}class k{constructor(){r.on(i.ActivityDesignDisplaying,this.onActivityDisplaying),r.on(i.Dashboard.Appearing,this.onLoadingMenu)}onActivityDisplaying(t){const i=t.activityModel;if(!i.type.endsWith("Manager"))return;const e=(i.properties||[]).find((t=>"Path"==t.name))||{name:"Path",expressions:{Literal:"",syntax:o.Literal}},a=l(e.expressions[e.syntax||o.Literal]);t.bodyDisplay=`<p>${a}</p>`}onLoadingMenu(t){t.data.menuItems=[...t.data.menuItems,["credential-manager","Credential Manager"]],t.data.routes=[...t.data.routes,["credential-manager","elsa-credential-manager-items-list",!0]]}}class D{constructor(t){this.initialize=async()=>{const t=this.options,{domain:i}=t;if(!i||0==i.trim().length)return;if(this.auth0=await w(t),await this.auth0.isAuthenticated())return;if(window.location.search.includes("code="))try{return await this.auth0.handleRedirectCallback(),void window.history.replaceState({},document.title,"/")}catch(t){return void console.log("Error parsing redirect:",t)}const e={redirect_uri:window.location.origin};await this.auth0.loginWithRedirect(e)},this.configureAuthMiddleware=async t=>{const i=this.auth0;t.service.register({async onRequest(t){const e=await i.getTokenSilently();return e&&(t.headers=Object.assign(Object.assign({},t.headers),{Authorization:`Bearer ${e}`})),t}})},this.options=t,r.on(i.Root.Initializing,this.initialize),r.on(i.HttpClientCreated,this.configureAuthMiddleware)}}export{D as Auth0Plugin,k as CredentialManagerPlugin,u as FlowchartEvents,j as WebhooksPlugin,x as WorkflowSettingsPlugin};