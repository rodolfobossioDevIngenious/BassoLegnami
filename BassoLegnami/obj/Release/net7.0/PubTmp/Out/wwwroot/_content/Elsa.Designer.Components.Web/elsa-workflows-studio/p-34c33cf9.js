class t{constructor(){this.supportedFeatures={workflowLayout:"workflowLayout"},this.getFeatureList=()=>Object.keys(this.features),this.getUIFeatureList=()=>Object.keys(this.features).filter((e=>this.features[e].ui)),this.getFeatureConfig=e=>{const t=localStorage.getItem(`elsa.properties.${e}`),s=localStorage.getItem(`elsa.properties.${e}.enabled`),a=this.features[e];if(a)return Object.assign(Object.assign({},a),{value:null===t?a.defaultValue:t,enabled:null===s?a.enabled:"true"===s})},this.setFeatureConfig=(e,t)=>{this.features[e]&&localStorage.setItem(`elsa.properties.${e}`,t)},this.setEnableStatus=(e,t)=>{this.features[e]&&(localStorage.setItem(`elsa.properties.${e}.enabled`,`${t}`),console.log(`elsa.properties.${e}-enabled`,t))}}initialize(e){this.initialized||(this.elsaStudio=e,this.initialized=!0,this.features=e.features||{})}}const e=new t;export{t as F,e as f};