@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)
@@using Microsoft.AspNetCore.Mvc.Localization
@@inject IHtmlLocalizer<SharedResource> SR

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = string.Format("{0} {1}", SR["List"].Value, Html.DescriptionFor(model => model.FirstOrDefault().@GetPrimaryKeyName()).ToString());
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }
@:<div class="row">
    @:<div class="col-md-12">
        @:<div class="card data-tables">
            @:<div class="card-body table-striped table-bordered table-hover dataTable dtr-inline table-full-width">
                @:<div class="fresh-datatables">
                    @:<div class="card-header">
                        @:<h4 class="card-title title">@@ViewData["Title"]</h4>
                    @:</div>
                    @:<hr/>
                    @:<table class="table table-striped table-bordered table-hover" cellspacing="0" width="100%" style="width:100%">
                        @:<thead>
                            @:<tr>

                            var properties = Model.ModelMetadata.Properties;
                            foreach (var property in properties)
                            {
                                if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey && (property.PropertyName != "CreatedBy" && property.PropertyName != "CreatedOn" && property.PropertyName != "UpdatedBy" && property.PropertyName != "UpdatedOn" && property.PropertyName != "RowVersion"))
                                {
                                @:<th><displayName asp-for="@@Model.FirstOrDefault().@GetValueExpression(property)" class="control-label"></displayName></th>
                                }
                            }
                            foreach (var navigation in Model.ModelMetadata.Navigations)
                            {
                                @:<th><displayName asp-for="@@Model.FirstOrDefault().@GetValueExpression(navigation)" class="control-label"></displayName></th>
                            }
                                @:<th class="text-right">
                                    @:<a asp-action="Create" class="btn btn-primary"><i class="fa fa-plus"></i> @@SR["CreateNew"]</a>
                                @:</th>
                            @:</tr>
                        @:</thead>
                        @:<tbody>
                        @:@@foreach (var item in Model) {
                            @:<tr>
                            foreach (PropertyMetadata property in properties)
                            {
                                if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey && (property.PropertyName != "CreatedBy" && property.PropertyName != "CreatedOn" && property.PropertyName != "UpdatedBy" && property.PropertyName != "UpdatedOn" && property.PropertyName != "RowVersion"))
                                {
                                @:<td><displayValue asp-for="@@item.@GetValueExpression(property)" class="form-control"></displayValue></td>
                                }
                            }
                            foreach (var navigation in Model.ModelMetadata.Navigations)
                            {
                                @:<td><displayValue asp-for="@@item.@GetValueExpression(navigation).@navigation.DisplayPropertyName" class="form-control"></displayValue></td>
                            }
                            string pkName = GetPrimaryKeyName();
                            if (pkName != null)
                            {
                                @:<td class="text-right">
                                    @:<a asp-action="Details" asp-route-id="@@item.@pkName" class="btn btn-default"><i class="fa fa-list-alt"></i></a>
                                    @:<a asp-action="Edit" asp-route-id="@@item.@pkName" class="btn btn-md btn-warning"><i class="fa fa-pencil-square-o"></i> </a>
                                    @:<a asp-action="Delete" asp-route-id="@@item.@pkName" class="btn btn-danger"><i class="fa fa-trash"></i></a>
                                @:</td>
                            }
                            else
                            {
                                <td>
                                    @@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ })
                                    @@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ })
                                    @@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                                </td>
                            }
                            @:</tr>
                        @:}
                        @:</tbody>

                    @:</table>
                @:</div>
            @:</div>
        @:</div>
    @:</div>
@:</div>
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}