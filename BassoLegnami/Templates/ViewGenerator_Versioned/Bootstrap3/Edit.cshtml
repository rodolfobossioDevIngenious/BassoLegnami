@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName
@@using Microsoft.AspNetCore.Mvc.Localization
@@inject IHtmlLocalizer<SharedResource> SR

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = string.Format("{0} {1}", SR["Edit"].Value, Html.DisplayNameFor(model => model.@GetPrimaryKeyName()).ToString());
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@@ViewData["Title"]</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<div class="row">
    @:<div class="col-md-3"></div>
    @:<div class="col-md-6">
        @:<div class="card stacked-form">
            @:<div class="card-header">
                @:<h4 class="card-title title">@@ViewData["Title"]</h4>
            @:</div>
            @:<div class="card-body">
                @:<form asp-action="@Model.ViewName">
                    @:<hr />
                    @:<div asp-validation-summary="ModelOnly" class="alert alert-danger"><i class="fa fa-close"></i></div>
        foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
        {
            if (property.IsPrimaryKey || (property.PropertyName == "CreatedBy" || property.PropertyName == "CreatedOn" || property.PropertyName == "UpdatedBy" || property.PropertyName == "UpdatedOn" || property.PropertyName == "RowVersion"))
            {
                    @:<input type="hidden" asp-for="@property.PropertyName" />
                continue;
            }

            if (property.Scaffold)
            {
                if (property.IsReadOnly)
                {
                    continue;
                }

                if (property.IsForeignKey)
                {
                    @:<div class="form-group">
                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                        @:<select asp-for="@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                    @:</div>
                    continue;
                }

                if (property.IsEnum && !property.IsEnumFlags)
                {
                    @:<div class="form-group">
                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                        @:<select asp-for="@property.PropertyName" class="form-control"></select>
                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                    @:</div>
                }
                else
                {
                    @:<div class="form-group">
                        @:<label asp-for="@property.PropertyName" class="control-label"></label>
                        @:<input asp-for="@property.PropertyName" class="form-control" />
                        @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                    @:</div>
                }
            }
            // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
            else if (property.IsForeignKey)
            {
                    @:<input type="hidden" asp-for="@property.PropertyName" />
                continue;
            }
        }
                    @:<hr />
                    @:<div class="text-right">
                        @:<button type="submit" value="Edit" class="btn btn-warning"><i class="fa fa-save"></i> @@SR["Save"]</button>
                        @:<a asp-action="Index" class="btn btn-default"><i class="fa fa-chevron-left"></i> @@SR["BackToList"]</a>
                    @:</div>
                @:</form>
            @:</div>
        @:</div>
    }
    </div>
    <div class="col-md-3"></div>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
