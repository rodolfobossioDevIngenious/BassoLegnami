const t=(t,e)=>{let c=new Map,n=t;const a=(t,e)=>{Array.isArray(t)?[...t].forEach((t=>{e[t]=n[t]})):e[t]=Object.assign({},n)},s=(t,e)=>(c.has(t)||(c.set(t,e),a(e,t)),()=>{c.has(t)&&c.delete(t)});return{Provider:({state:t},e)=>(n=t,c.forEach(a),e),Consumer:(t,c)=>e(s,c[0]),injectProps:(t,e)=>{const n=t.prototype,a=n.connectedCallback,o=n.disconnectedCallback;n.connectedCallback=function(){if(s(this,e),a)return a.call(this)},n.disconnectedCallback=function(){c.delete(this),o&&o.call(this)}}}};export{t as c};