async function n(t,n=null){t.classList.remove("hidden"),await a("enter",t,n)}async function t(t,n=null){await a("leave",t,n),t.classList.add("hidden")}async function e(a,i=null){a.classList.contains("hidden")?await n(a,i):await t(a,i)}async function a(t,n,a){const s=n.dataset,e=a?`${a}-${t}`:t;let c=`transition${t.charAt(0).toUpperCase()+t.slice(1)}`;const r=s[c]?s[c].split(" "):[e],l=s[`${c}Start`]?s[`${c}Start`].split(" "):[`${e}-start`],u=s[`${c}End`]?s[`${c}End`].split(" "):[`${e}-end`];i(n,r),i(n,l),await new Promise((t=>{requestAnimationFrame((()=>{requestAnimationFrame(t)}))})),o(n,l),i(n,u),await function(t){return new Promise((n=>{const a=getComputedStyle(t).transitionDuration.split(",")[0],i=1e3*Number(a.replace("s",""));setTimeout((()=>{n()}),i)}))}(n),o(n,u),o(n,r)}function i(t,n){t.classList.add(...n)}function o(t,n){t.classList.remove(...n)}export{n as e,t as l,e as t};